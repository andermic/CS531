
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri May 05 18:43:51 EDT 2006
//----------------------------------------------------

package logic.kb.fol.parser;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import logic.kb.fol.*;

/** CUP v0.10k generated parser.
  * @version Fri May 05 18:43:51 EDT 2006
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\005\000" +
    "\002\003\004\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\003\000\002" +
    "\007\003\000\002\007\004\000\002\007\003\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\004" +
    "\000\002\007\004\000\002\006\003\000\002\006\005\000" +
    "\002\004\003\000\002\004\004\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\007\000\002\005" +
    "\007\000\002\005\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\040\006\006\010\014\014\011\015\012\024" +
    "\024\026\010\035\013\036\020\040\021\041\004\044\017" +
    "\045\023\046\026\047\005\050\007\001\002\000\004\015" +
    "\126\001\002\000\044\002\ufffa\006\uffe6\007\uffe6\011\ufffa" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\025\ufffa\027\ufffa\030" +
    "\uffe6\031\ufffa\032\ufffa\033\uffe6\034\uffe6\037\uffe6\044\uffe6" +
    "\001\002\000\024\006\006\010\054\014\011\015\012\044" +
    "\017\045\023\046\026\047\051\050\053\001\002\000\026" +
    "\006\006\010\054\011\122\014\011\015\012\044\017\045" +
    "\023\046\026\047\051\050\053\001\002\000\040\006\006" +
    "\010\014\014\011\015\012\024\024\026\010\035\013\036" +
    "\020\040\021\041\004\044\017\045\023\046\026\047\005" +
    "\050\007\001\002\000\024\006\006\010\054\014\011\015" +
    "\012\044\017\045\023\046\026\047\051\050\053\001\002" +
    "\000\004\047\116\001\002\000\016\002\ufffc\011\ufffc\025" +
    "\ufffc\027\ufffc\031\ufffc\032\ufffc\001\002\000\040\006\006" +
    "\010\014\014\011\015\012\024\024\026\010\035\013\036" +
    "\020\040\021\041\004\044\017\045\023\046\026\047\005" +
    "\050\007\001\002\000\030\006\060\007\063\020\104\021" +
    "\077\022\100\023\101\030\062\033\103\034\056\037\102" +
    "\044\061\001\002\000\014\002\076\025\036\027\040\031" +
    "\037\032\035\001\002\000\024\006\006\010\054\014\011" +
    "\015\012\044\017\045\023\046\026\047\051\050\053\001" +
    "\002\000\016\002\ufffb\011\ufffb\025\ufffb\027\ufffb\031\ufffb" +
    "\032\ufffb\001\002\000\004\015\045\001\002\000\040\006" +
    "\006\010\014\014\011\015\012\024\024\026\010\035\013" +
    "\036\020\040\021\041\004\044\017\045\023\046\026\047" +
    "\005\050\007\001\002\000\050\002\uffe9\006\uffe9\007\uffe9" +
    "\011\uffe9\013\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\025\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\037\uffe9\044\uffe9\001\002\000\004\015\030\001" +
    "\002\000\040\006\uffde\010\uffde\014\uffde\015\uffde\024\024" +
    "\026\uffde\035\uffde\036\uffde\040\021\041\004\044\uffde\045" +
    "\uffde\046\uffde\047\uffde\050\uffde\001\002\000\050\002\uffe8" +
    "\006\uffe8\007\uffe8\011\uffe8\013\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\025\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\037\uffe8\044\uffe8\001\002\000" +
    "\040\006\uffdd\010\uffdd\014\uffdd\015\uffdd\024\uffdd\026\uffdd" +
    "\035\uffdd\036\uffdd\040\uffdd\041\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\001\002\000\004\047\031\001\002" +
    "\000\042\006\uffda\010\uffda\014\uffda\015\uffda\016\032\024" +
    "\uffda\026\uffda\035\uffda\036\uffda\040\uffda\041\uffda\044\uffda" +
    "\045\uffda\046\uffda\047\uffda\050\uffda\001\002\000\004\047" +
    "\033\001\002\000\040\006\uffd7\010\uffd7\014\uffd7\015\uffd7" +
    "\024\uffd7\026\uffd7\035\uffd7\036\uffd7\040\uffd7\041\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\001\002\000\016" +
    "\002\ufff1\011\ufff1\025\036\027\040\031\037\032\035\001" +
    "\002\000\040\006\006\010\014\014\011\015\012\024\024" +
    "\026\010\035\013\036\020\040\021\041\004\044\017\045" +
    "\023\046\026\047\005\050\007\001\002\000\040\006\006" +
    "\010\014\014\011\015\012\024\024\026\010\035\013\036" +
    "\020\040\021\041\004\044\017\045\023\046\026\047\005" +
    "\050\007\001\002\000\040\006\006\010\014\014\011\015" +
    "\012\024\024\026\010\035\013\036\020\040\021\041\004" +
    "\044\017\045\023\046\026\047\005\050\007\001\002\000" +
    "\040\006\006\010\014\014\011\015\012\024\024\026\010" +
    "\035\013\036\020\040\021\041\004\044\017\045\023\046" +
    "\026\047\005\050\007\001\002\000\016\002\uffff\011\uffff" +
    "\025\036\027\uffff\031\uffff\032\uffff\001\002\000\016\002" +
    "\ufffe\011\ufffe\025\036\027\040\031\ufffe\032\ufffe\001\002" +
    "\000\016\002\000\011\000\025\000\027\000\031\000\032" +
    "\000\001\002\000\016\002\ufffd\011\ufffd\025\036\027\040" +
    "\031\037\032\ufffd\001\002\000\004\047\046\001\002\000" +
    "\042\006\uffdc\010\uffdc\014\uffdc\015\uffdc\016\047\024\uffdc" +
    "\026\uffdc\035\uffdc\036\uffdc\040\uffdc\041\uffdc\044\uffdc\045" +
    "\uffdc\046\uffdc\047\uffdc\050\uffdc\001\002\000\004\047\050" +
    "\001\002\000\040\006\uffd9\010\uffd9\014\uffd9\015\uffd9\024" +
    "\uffd9\026\uffd9\035\uffd9\036\uffd9\040\uffd9\041\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\047\uffd9\050\uffd9\001\002\000\050\002" +
    "\uffe6\006\uffe6\007\uffe6\011\uffe6\013\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\025\uffe6\027\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\037\uffe6\044\uffe6\001\002" +
    "\000\050\002\uffe2\006\uffe2\007\uffe2\011\uffe2\013\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\025\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\037\uffe2\044" +
    "\uffe2\001\002\000\024\006\006\010\054\014\011\015\012" +
    "\044\017\045\023\046\026\047\051\050\053\001\002\000" +
    "\024\006\006\010\054\014\011\015\012\044\017\045\023" +
    "\046\026\047\051\050\053\001\002\000\016\006\060\007" +
    "\063\011\057\030\062\034\056\044\061\001\002\000\024" +
    "\006\006\010\054\014\011\015\012\044\017\045\023\046" +
    "\026\047\051\050\053\001\002\000\050\002\uffe4\006\uffe4" +
    "\007\uffe4\011\uffe4\013\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\025\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\037\uffe4\044\uffe4\001\002\000\024\006" +
    "\006\010\054\014\011\015\012\044\017\045\023\046\026" +
    "\047\051\050\053\001\002\000\024\006\006\010\054\014" +
    "\011\015\012\044\017\045\023\046\026\047\051\050\053" +
    "\001\002\000\024\006\006\010\054\014\011\015\012\044" +
    "\017\045\023\046\026\047\051\050\053\001\002\000\024" +
    "\006\006\010\054\014\011\015\012\044\017\045\023\046" +
    "\026\047\051\050\053\001\002\000\050\002\uffea\006\uffea" +
    "\007\uffea\011\uffea\013\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\025\uffea\027\uffea\030\uffea\031\uffea\032\uffea" +
    "\033\uffea\034\uffea\037\uffea\044\uffea\001\002\000\050\002" +
    "\uffeb\006\uffeb\007\uffeb\011\uffeb\013\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\025\uffeb\027\uffeb\030\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\037\uffeb\044\uffeb\001\002" +
    "\000\050\002\uffee\006\uffee\007\063\011\uffee\013\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\025\uffee\027\uffee" +
    "\030\062\031\uffee\032\uffee\033\uffee\034\056\037\uffee\044" +
    "\uffee\001\002\000\050\002\uffed\006\uffed\007\063\011\uffed" +
    "\013\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\025" +
    "\uffed\027\uffed\030\062\031\uffed\032\uffed\033\uffed\034\056" +
    "\037\uffed\044\uffed\001\002\000\050\002\uffec\006\uffec\007" +
    "\uffec\011\uffec\013\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\025\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\037\uffec\044\uffec\001\002\000\020\006\060" +
    "\007\063\011\uffe0\013\074\030\062\034\056\044\061\001" +
    "\002\000\004\011\073\001\002\000\050\002\uffe5\006\uffe5" +
    "\007\uffe5\011\uffe5\013\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\025\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\037\uffe5\044\uffe5\001\002\000\024\006" +
    "\006\010\054\014\011\015\012\044\017\045\023\046\026" +
    "\047\051\050\053\001\002\000\004\011\uffdf\001\002\000" +
    "\004\002\001\001\002\000\024\006\006\010\054\014\011" +
    "\015\012\044\017\045\023\046\026\047\051\050\053\001" +
    "\002\000\024\006\006\010\054\014\011\015\012\044\017" +
    "\045\023\046\026\047\051\050\053\001\002\000\024\006" +
    "\006\010\054\014\011\015\012\044\017\045\023\046\026" +
    "\047\051\050\053\001\002\000\024\006\006\010\054\014" +
    "\011\015\012\044\017\045\023\046\026\047\051\050\053" +
    "\001\002\000\024\006\006\010\054\014\011\015\012\044" +
    "\017\045\023\046\026\047\051\050\053\001\002\000\024" +
    "\006\006\010\054\014\011\015\012\044\017\045\023\046" +
    "\026\047\051\050\053\001\002\000\030\002\ufff5\006\060" +
    "\007\063\011\ufff5\025\ufff5\027\ufff5\030\062\031\ufff5\032" +
    "\ufff5\034\056\044\061\001\002\000\030\002\ufff7\006\060" +
    "\007\063\011\ufff7\025\ufff7\027\ufff7\030\062\031\ufff7\032" +
    "\ufff7\034\056\044\061\001\002\000\030\002\ufff6\006\060" +
    "\007\063\011\ufff6\025\ufff6\027\ufff6\030\062\031\ufff6\032" +
    "\ufff6\034\056\044\061\001\002\000\030\002\ufff2\006\060" +
    "\007\063\011\ufff2\025\ufff2\027\ufff2\030\062\031\ufff2\032" +
    "\ufff2\034\056\044\061\001\002\000\030\002\ufff3\006\060" +
    "\007\063\011\ufff3\025\ufff3\027\ufff3\030\062\031\ufff3\032" +
    "\ufff3\034\056\044\061\001\002\000\030\002\ufff4\006\060" +
    "\007\063\011\ufff4\025\ufff4\027\ufff4\030\062\031\ufff4\032" +
    "\ufff4\034\056\044\061\001\002\000\032\006\060\007\063" +
    "\011\057\020\104\021\077\022\100\023\101\030\062\033" +
    "\103\034\056\037\102\044\061\001\002\000\014\011\115" +
    "\025\036\027\040\031\037\032\035\001\002\000\016\002" +
    "\uffef\011\uffef\025\uffef\027\uffef\031\uffef\032\uffef\001\002" +
    "\000\050\002\uffe7\006\uffe7\007\uffe7\011\uffe7\013\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\025\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\037\uffe7\044" +
    "\uffe7\001\002\000\016\006\060\007\063\017\120\030\062" +
    "\034\056\044\061\001\002\000\050\002\uffe3\006\uffe3\007" +
    "\uffe3\011\uffe3\013\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\025\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\037\uffe3\044\uffe3\001\002\000\016\002\ufff0" +
    "\011\ufff0\025\ufff0\027\ufff0\031\ufff0\032\ufff0\001\002\000" +
    "\016\002\ufff8\011\ufff8\025\ufff8\027\ufff8\031\ufff8\032\ufff8" +
    "\001\002\000\004\011\124\001\002\000\044\002\ufff9\006" +
    "\uffe5\007\uffe5\011\ufff9\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\025\ufff9\027\ufff9\030\uffe5\031\ufff9\032\ufff9\033\uffe5\034" +
    "\uffe5\037\uffe5\044\uffe5\001\002\000\050\002\uffe1\006\uffe1" +
    "\007\uffe1\011\uffe1\013\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\025\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\037\uffe1\044\uffe1\001\002\000\004\047" +
    "\127\001\002\000\042\006\uffdb\010\uffdb\014\uffdb\015\uffdb" +
    "\016\130\024\uffdb\026\uffdb\035\uffdb\036\uffdb\040\uffdb\041" +
    "\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\001\002" +
    "\000\004\047\131\001\002\000\040\006\uffd8\010\uffd8\014" +
    "\uffd8\015\uffd8\024\uffd8\026\uffd8\035\uffd8\036\uffd8\040\uffd8" +
    "\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\012\003\015\004\021\005\024\007\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\124" +
    "\001\001\000\006\006\122\007\070\001\001\000\012\003" +
    "\120\004\021\005\024\007\014\001\001\000\004\007\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\113\004\021\005\024\007\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\033\004\021\005\024" +
    "\007\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\026\005\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\043" +
    "\004\021\005\024\007\014\001\001\000\012\003\042\004" +
    "\021\005\024\007\014\001\001\000\012\003\041\004\021" +
    "\005\024\007\014\001\001\000\012\003\040\004\021\005" +
    "\024\007\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\071\007\070\001" +
    "\001\000\004\007\054\001\001\000\002\001\001\000\004" +
    "\007\067\001\001\000\002\001\001\000\004\007\066\001" +
    "\001\000\004\007\065\001\001\000\004\007\064\001\001" +
    "\000\004\007\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\074\007\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\111\001\001\000\004\007\110\001" +
    "\001\000\004\007\107\001\001\000\004\007\106\001\001" +
    "\000\004\007\105\001\001\000\004\007\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	// Just a testing interface (loads formula from file)
	public static void main(String args[]) {

                Yylex lex = null;
	        try {
	           System.out.println("Opening: " + args[0]);
	           lex = new Yylex(new FileInputStream(args[0]));
	           parser p = new parser(lex);
		   Symbol rval = p.parse();
                   FOPC.Node head = (FOPC.Node)rval.value;
	           //head.setVarID(new HashMap());
		   System.out.println("KIF:  " + head.toKIFString());
		   System.out.println("FOPC: " + head.toFOLString());
                } catch (Exception e) {
	           System.out.println("Error on line " + 
				      ((lex != null) ? ""+lex.yyline() : "") 
	 			      + ": " + e);
		   e.printStackTrace();
                }
        }

	// The main runtime method to call
	public static FOPC.Node parse(String s) 
 		throws ParseException {

                Yylex  lex  = null;
		Symbol rval = null;
	        try {
	           lex = new Yylex(new StringReader(s));
	           parser p = new parser(lex);
		   rval = p.parse();

                } catch (Exception e) {
	           throw new ParseException(lex.yyline(), e.toString());
                }

                FOPC.Node head = (FOPC.Node)rval.value;
		//head.setVarID(new HashMap());
		return head;
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // squant ::= COUNT QST IDENT COLON IDENT 
            {
              FOPC.Quant RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.Quant(FOPC.QNode.COUNT, i, t);  
              CUP$parser$result = new java_cup.runtime.Symbol(3/*squant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // squant ::= FORALL QST IDENT COLON IDENT 
            {
              FOPC.Quant RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.Quant(FOPC.QNode.FORALL, i, t); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*squant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // squant ::= EXISTS QST IDENT COLON IDENT 
            {
              FOPC.Quant RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.Quant(FOPC.QNode.EXISTS, i, t); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*squant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // squant ::= COUNT QST IDENT 
            {
              FOPC.Quant RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.Quant(FOPC.QNode.COUNT, i); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*squant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // squant ::= FORALL QST IDENT 
            {
              FOPC.Quant RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.Quant(FOPC.QNode.FORALL, i); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*squant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // squant ::= EXISTS QST IDENT 
            {
              FOPC.Quant RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.Quant(FOPC.QNode.EXISTS, i); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*squant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // quant ::= squant quant 
            {
              FOPC.Quant RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FOPC.Quant s = (FOPC.Quant)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.Quant q = (FOPC.Quant)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.Quant(s,q);   
              CUP$parser$result = new java_cup.runtime.Symbol(2/*quant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // quant ::= squant 
            {
              FOPC.Quant RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.Quant s = (FOPC.Quant)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s;                     
              CUP$parser$result = new java_cup.runtime.Symbol(2/*quant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lterm ::= sterm COMMA lterm 
            {
              FOPC.TermList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FOPC.TermList s = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.TermList l = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.TermList(s,l); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*lterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lterm ::= sterm 
            {
              FOPC.TermList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.TermList s = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s;                      
              CUP$parser$result = new java_cup.runtime.Symbol(4/*lterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sterm ::= PLUS sterm 
            {
              FOPC.TermList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.TermList t = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*sterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sterm ::= MINUS sterm 
            {
              FOPC.TermList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.TermList t = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.TermList(new FOPC.TFunction("f_sub", new FOPC.TermList(new FOPC.TInteger(0)), t)); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*sterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sterm ::= LBRACK sterm RBRACK 
            {
              FOPC.TermList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FOPC.TermList e = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*sterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sterm ::= LPAREN sterm RPAREN 
            {
              FOPC.TermList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FOPC.TermList e = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*sterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sterm ::= PFNAME lterm RPAREN 
            {
              FOPC.TermList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FOPC.TermList l = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FOPC.TermList(new FOPC.TFunction(p,l)); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*sterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sterm ::= IDENT 
            {
              FOPC.TermList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.TermList(new FOPC.TFunction(i));   
              CUP$parser$result = new java_cup.runtime.Symbol(5/*sterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sterm ::= QST IDENT 
            {
              FOPC.TermList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.TermList(new FOPC.TVar(i));        
              CUP$parser$result = new java_cup.runtime.Symbol(5/*sterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sterm ::= DOUBLE 
            {
              FOPC.TermList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.TermList(new FOPC.TScalar(d));     
              CUP$parser$result = new java_cup.runtime.Symbol(5/*sterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sterm ::= INTEGER 
            {
              FOPC.TermList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.TermList(new FOPC.TInteger(i));    
              CUP$parser$result = new java_cup.runtime.Symbol(5/*sterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sterm ::= sterm TIMES sterm 
            {
              FOPC.TermList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FOPC.TermList l = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.TermList r = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.TermList(new FOPC.TFunction("f_mul", l, r)); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*sterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sterm ::= sterm DIV sterm 
            {
              FOPC.TermList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FOPC.TermList l = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.TermList r = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.TermList(new FOPC.TFunction("f_div", l, r)); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*sterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sterm ::= sterm MOD sterm 
            {
              FOPC.TermList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FOPC.TermList l = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.TermList r = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.TermList(new FOPC.TFunction("f_mod", l, r)); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*sterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sterm ::= sterm PLUS sterm 
            {
              FOPC.TermList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FOPC.TermList l = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.TermList r = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.TermList(new FOPC.TFunction("f_add", l, r)); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*sterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sterm ::= sterm MINUS sterm 
            {
              FOPC.TermList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FOPC.TermList l = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.TermList r = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.TermList(new FOPC.TFunction("f_sub", l, r)); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*sterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // node ::= LPAREN node RPAREN 
            {
              FOPC.Node RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FOPC.Node n = (FOPC.Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = n;                           
              CUP$parser$result = new java_cup.runtime.Symbol(1/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // node ::= NOT node 
            {
              FOPC.Node RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.Node n = (FOPC.Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.NNode(n);           
              CUP$parser$result = new java_cup.runtime.Symbol(1/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // node ::= quant node 
            {
              FOPC.Node RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FOPC.Quant q = (FOPC.Quant)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.Node n = (FOPC.Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.QNode(q,n);         
              CUP$parser$result = new java_cup.runtime.Symbol(1/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // node ::= sterm GREATEREQ sterm 
            {
              FOPC.Node RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FOPC.TermList s1 = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.TermList s2 = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.PNode(true,FOPC.PNode.LESS,  s1,s2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // node ::= sterm GREATER sterm 
            {
              FOPC.Node RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FOPC.TermList s1 = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.TermList s2 = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.PNode(true,FOPC.PNode.LESSEQ,s1,s2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // node ::= sterm LESSEQ sterm 
            {
              FOPC.Node RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FOPC.TermList s1 = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.TermList s2 = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.PNode(false,FOPC.PNode.LESSEQ,  s1,s2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // node ::= sterm LESS sterm 
            {
              FOPC.Node RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FOPC.TermList s1 = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.TermList s2 = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.PNode(false,FOPC.PNode.LESS,    s1,s2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // node ::= sterm NEQUAL sterm 
            {
              FOPC.Node RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FOPC.TermList s1 = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.TermList s2 = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.PNode(true,FOPC.PNode.EQUALS,   s1,s2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // node ::= sterm EQUAL sterm 
            {
              FOPC.Node RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FOPC.TermList s1 = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.TermList s2 = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.PNode(false,FOPC.PNode.EQUALS,  s1,s2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // node ::= PFNAME RPAREN 
            {
              FOPC.Node RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FOPC.PNode(false,p);   
              CUP$parser$result = new java_cup.runtime.Symbol(1/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // node ::= PFNAME lterm RPAREN 
            {
              FOPC.Node RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FOPC.TermList l = (FOPC.TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FOPC.PNode(false,p,l); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // node ::= IDENT 
            {
              FOPC.Node RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.PNode(false,p);   
              CUP$parser$result = new java_cup.runtime.Symbol(1/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // node ::= FALSE 
            {
              FOPC.Node RESULT = null;
		 RESULT = new FOPC.TNode(false);     
              CUP$parser$result = new java_cup.runtime.Symbol(1/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // node ::= TRUE 
            {
              FOPC.Node RESULT = null;
		 RESULT = new FOPC.TNode(true);      
              CUP$parser$result = new java_cup.runtime.Symbol(1/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // node ::= node EQUIV node 
            {
              FOPC.Node RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FOPC.Node n1 = (FOPC.Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.Node n2 = (FOPC.Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.ConnNode(FOPC.ConnNode.EQUIV,n1,n2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // node ::= node IMPLY node 
            {
              FOPC.Node RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FOPC.Node n1 = (FOPC.Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.Node n2 = (FOPC.Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.ConnNode(FOPC.ConnNode.IMPLY,n1,n2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // node ::= node OR node 
            {
              FOPC.Node RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FOPC.Node n1 = (FOPC.Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.Node n2 = (FOPC.Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.ConnNode(FOPC.ConnNode.OR,n1,n2);    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // node ::= node AND node 
            {
              FOPC.Node RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FOPC.Node n1 = (FOPC.Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FOPC.Node n2 = (FOPC.Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FOPC.ConnNode(FOPC.ConnNode.AND,n1,n2);   
              CUP$parser$result = new java_cup.runtime.Symbol(1/*node*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= node EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FOPC.Node start_val = (FOPC.Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

